syntax = "proto3";

package api;

message SpawnRequest {
    string program = 1;
    string working_directory = 2;
    repeated string args = 3;
    map<string, string> envs = 4;
}

message SpawnResponse {
    bytes uuid = 1;
}

message StopRequest {
    bytes uuid = 1;
}

message StopResponse {}

message StreamLogRequest {
    bytes uuid = 1;
    bool from_beginning = 2;
}

message StreamLogResponse {
    message StreamLogStdoutEvent {
        bytes output = 1;
    }
    
    message StreamLogStderrEvent {
        bytes output = 1;
    }
    
    message StreamLogExitEvent {
        int32 code = 1;
    }

    oneof response {
        StreamLogStdoutEvent stdout = 1;
        StreamLogStderrEvent stderr = 2;
        StreamLogExitEvent exit = 3;
    }
}

message StatusRequest {
    bytes uuid = 1;
}

message StatusResponse {
    message StatusResponseRunning {}

    message StatusResponseTerminated {
        int32 code = 1;
    }

    oneof response {
        StatusResponseRunning running = 1;
        StatusResponseTerminated terminated = 2;
    }
}

message IssueJWTRequest {
    string user_name = 1;
    bool allow_spawn = 2;
    bool allow_stop = 3;
    bool allow_stream_log = 4;
    bool allow_status = 5;
}

message IssueJWTResponse {
    string jwt = 1;
}

service Api {
    rpc Spawn(SpawnRequest) returns (SpawnResponse) {}
    rpc Stop(StopRequest) returns (StopResponse) {}
    rpc StreamLog(StreamLogRequest) returns (stream StreamLogResponse) {}
    rpc Status(StatusRequest) returns (StatusResponse) {}
    rpc IssueJWT(IssueJWTRequest) returns (IssueJWTResponse) {}
}
